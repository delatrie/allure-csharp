<Project>
    <PropertyGroup>
        <Allure_TransformReadmeSource>$(MSBuildThisFileDirectory)build\TransformReadmeForNuget.cs</Allure_TransformReadmeSource>
    </PropertyGroup>
    <ItemGroup>
        <NuGetPackInput Include="$(Allure_TransformReadmeSource)" />
    </ItemGroup>
    <UsingTask TaskName="Allure_TransformReadmeForNuget"
            TaskFactory="RoslynCodeTaskFactory"
            AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <InputReadmePath Required="true" />
            <OutputDirPath Required="true" />
            <GeneratedReadmePath Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="System.Text" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment"
                Language="cs"
                Source="$(Allure_TransformReadmeSource)"/>
        </Task>
    </UsingTask>

    <!--
    NuGet don't support <img> (in particular, align, width and height).
    This task generates a new README file with those unsupported constructs removed.
    -->
    <Target Name="Allure_GenerateNugetReadmeFiles"
            BeforeTargets="GenerateNuspec"
            Condition="'$(IsPackable)' == 'true'"
            Inputs="@(NuGetPackInput)" Outputs="@(NuGetPackOutput)">
        <Allure_TransformReadmeForNuget
            InputReadmePath="README.md"
            OutputDirPath="$(IntermediateOutputPath)">
            <Output TaskParameter="GeneratedReadmePath"
                PropertyName="Allure_NugetTransformedReadmePath" />
        </Allure_TransformReadmeForNuget>
        <Message Text="A new README was generated for $(MSBuildProjectName) at $(Allure_NugetTransformedReadmePath)" Importance="high" />
        <ItemGroup>
            <_PackageFiles Remove="README.md" />
            <_PackageFiles Include="$(Allure_NugetTransformedReadmePath)">
                <BuildAction>None</BuildAction>
                <PackagePath>/README.md</PackagePath>
            </_PackageFiles>
        </ItemGroup>
    </Target>

    <!-- Some assemblies have strong names. We should resign them after AspectInjector before publishing on NuGet.
     Otherwise, they won't pass the `sn.exe -vf <assembly>` check -->

    <Target Name="Allure_SetAssemblyTimestampBeforeAspectInjection"
            AfterTargets="CoreCompile"
            BeforeTargets="$(_InjectAspectsDependsOn)">
        <PropertyGroup>
            <Allure_AssemblyTimestampBeforeAspectInjection>%(IntermediateAssembly.ModifiedTime)</Allure_AssemblyTimestampBeforeAspectInjection>
        </PropertyGroup>
    </Target>

    <Target Name="Allure_SetAssemblyTimestampAfterAspectInjection"
            AfterTargets="AspectInjector_InjectAspects"
            BeforeTargets="Allure_UpdateStrongNameSignatures">
        <PropertyGroup>
            <Allure_AssemblyTimestampAfterAspectInjection>%(IntermediateAssembly.ModifiedTime)</Allure_AssemblyTimestampAfterAspectInjection>
        </PropertyGroup>
    </Target>

    <!--
        Only resign the assembly if all four conditions are met:
            1. We're running on Windows (sn.exe is a Windows-only utility).
            2. The assembly's been signed during the compilation.
            3. A path to sn.exe is given.
            4. AspectInjector has modified the assembly.
    -->
    <Target Name="Allure_UpdateStrongNameSignatures"
            Condition=" '$(OS)' == 'Windows_NT'
                And '$(SignAssembly)' == 'true'
                And Exists('$(AssemblyOriginatorKeyFile)')
                And Exists('$(Allure_SnExePath)')
                And '$(Allure_AssemblyTimestampBeforeAspectInjection)' != '$(Allure_AssemblyTimestampAfterAspectInjection)'"
            AfterTargets="AspectInjector_InjectAspects"
            BeforeTargets="_TimeStampAfterCompile;AfterCompile">
        <Exec   UseUtf8Encoding="Always"
                StdOutEncoding="UTF-8"
                StdErrEncoding="UTF-8"
                Command="&quot;$(Allure_SnExePath)&quot; -Ra &quot;%(IntermediateAssembly.FullPath)&quot; &quot;$(AssemblyOriginatorKeyFile)&quot;"
        />
    </Target>
</Project>